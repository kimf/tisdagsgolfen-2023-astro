<!-- ---
import db from 'src/db';
import { eq } from 'drizzle-orm';

const { id } = Astro.params;

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const sessionId = formData.get('sessionId');
  const strokesEntries = [...formData.entries()]
    .filter(([key]) => key.startsWith('strokes['))
    .map(([key, value]) => {
      const playerId = key.match(/strokes\[(.*?)\]/)?.[1];
      return { playerId, strokes: Number(value), sessionId };
    });

  // Upsert or insert scores
  for (const entry of strokesEntries) {
    await db.insert(strokes).values(entry);
  }

  return redirect(`/score/${sessionId}`);
}

const teamData = await db.select().from(teamMembers).where(eq(teamMembers.sessionId, id));

const playerIds = teamData.map((tm) => tm.playerId);
const allPlayers = await db
  .select()
  .from(players)
  .where((p) => playerIds.includes(p.id));

// Group players by team
const teams = teamData.reduce((acc, tm) => {
  const player = allPlayers.find((p) => p.id === tm.playerId);
  if (!acc[tm.teamIndex]) acc[tm.teamIndex] = [];
  if (player) acc[tm.teamIndex].push({ id: player.id, name: player.name });
  return acc;
}, {});

const jsonTeams = JSON.stringify(teams);
---

<html lang="en">
  <head>
    <title>Score Entry</title>
    <script src="https://unpkg.com/alpinejs" defer></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      body {
        background: #2e3440;
        color: #d8dee9;
        font-family: monospace;
        padding: 1rem;
      }
      h3,
      h4 {
        color: #81a1c1;
      }
      input[type='number'] {
        background: #3b4252;
        color: #d8dee9;
        border: 1px solid #4c566a;
        border-radius: 4px;
        padding: 0.3rem;
        width: 4rem;
        text-align: center;
      }
      button {
        margin-top: 1rem;
        padding: 0.5rem 1rem;
        background: none;
        border: 1px solid #4c566a;
        color: #d8dee9;
        border-radius: 4px;
      }
      button:hover {
        background: #434c5e;
      }
    </style>
  </head>
  <body>
    <form method="POST" x-data="scoringForm()" x-init="init()">
      <template x-for="(players, teamIndex) in teams" :key="teamIndex">
        <div style="margin-bottom: 1.5rem;">
          <h3>Team <span x-text="parseInt(teamIndex) + 1"></span></h3>
          <template x-for="player in players" :key="player.id">
            <div style="margin-bottom: 0.5rem;">
              <label x-text="player.name"></label>
              <input
                type="number"
                :name="`strokes[${player.id}]`"
                x-model.number="scores[player.id]"
                min="0"
              />

              <HoleInputWithPad player={player} hole={hole} sessionId={id} />
            </div>
          </template>
        </div>
      </template>

      <input type="hidden" name="sessionId" value={id} />
      <button type="submit">Save Scores</button>
    </form>

    <script>
      function scoringForm() {
        return {
          teams: {},
          scores: {},
          init() {
            this.teams = JSON.parse(`<?= jsonTeams ?>`);
            for (let team of Object.values(this.teams)) {
              for (let player of team) {
                this.scores[player.id] = 0;
              }
            }
          }
        };
      }
    </script>
  </body>
</html> -->
