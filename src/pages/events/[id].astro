---
import CourseRow from '../../components/CourseRow.astro';
import EventPillRow from '../../components/EventPillRow.astro';
import Row from '../../components/Row.astro';
import Beers from '../../components/Shared/Beers.astro';
import Ciders from '../../components/Shared/Ciders.astro';
import Name from '../../components/Shared/Name.astro';
import ToPar from '../../components/Shared/ToPar.astro';
import Layout from '../../layouts/Layout.astro';
import { getEvent } from '../../utils/getEvent';
import { getEvents } from '../../utils/getEvents';
import { getSeason } from '../../utils/getSeason';
import standardCompRank from '../../utils/standardCompetitionRanking';

export async function getStaticPaths() {
  const season = await getSeason('2024');
  const events = await getEvents(season.data!.id as number);
  return events.data?.map((event) => ({ params: { id: `${event.id}` } }));
}

const { id } = Astro.params;
const eventId = parseInt(`${id}`, 10);

const data = await getEvent(eventId);
const event = data?.data;

if (!event) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

const date = new Date(event.created_at as string).toLocaleDateString('sv-SE', {
  month: 'long',
  day: 'numeric',
});

const scorecards = event.event_sessions.flatMap((es) => es.session?.scorecards);
const rankedScorecards: ScorecardWithRank[] = standardCompRank(scorecards, 'week_points', false);
---

<Layout title="VECKORESULTAT - Tisdagsgolfen" />
<header>
  <button type="button" onclick="javascript:history.back()">&larr;</button>
</header>
<main>
  <Row>
    <h3>{date}</h3>
    <EventPillRow
      special={event.special}
      teamEvent={event.team_event}
      strokes={event.strokes}
      small
    />
  </Row>
  <CourseRow course={event.course as Course} />

  <div>
    <div>
      <span>SLAG</span>
      <span>POÃ„NG</span>
      <span>+/-</span>
      {!event.special && <span>ðŸ’¸</span>}
      <strong>P</strong>
    </div>
  </div>

  {
    rankedScorecards.map((scorecard) => (
      <div>
        <div>
          {scorecard.players.map((p) => (
            <div>
              <Name name={p.player.full_name || ''} firstNameOnly />
              <Beers beers={p.beers || 0} />
              <Ciders ciders={p.ciders || 0} />
            </div>
          ))}
        </div>
        <div>
          <span>{scorecard.strokes}</span>
          <span>{scorecard.points}</span>

          <ToPar to_par={scorecard.to_par || 0} />

          {!event.team_event && !event.special && (
            <span>{scorecard.players.reduce((a, b) => a + (b.fines || 0), 0)}</span>
          )}
          <strong>{scorecard.week_points?.toFixed(1)}</strong>
        </div>
      </div>
    ))
  }
</main>
