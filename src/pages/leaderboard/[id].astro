---
import CourseRow from '../../components/CourseRow.astro';
import EventPillRow from '../../components/EventPillRow.astro';
import LiveLeaderboardHeader from '../../components/Leaderboard/LiveLeaderboardHeader.astro';
import LiveLederboardCard from '../../components/Leaderboard/LiveLederboardCard.astro';
import Row from '../../components/Row.astro';
import Layout from '../../layouts/Layout.astro';
import { getLeaderboard } from '../../utils/getLeaderboard';
import { getPlayers } from '../../utils/getPlayers';
import { getSession } from '../../utils/getSession';
import standardCompRank from '../../utils/standardCompetitionRanking';

const { id } = Astro.params;
const sessionId = parseInt(`${id}`, 10);
const data = await getSession(sessionId);
const session = data?.data as ScoringSession;
const course = session.course as Course;

const players = await getPlayers();

const leaderboard = await getLeaderboard(
  course.id,
  session.special,
  session.team_event,
  session.strokes,
  session.part_of_final
);

const holesCount = course?.holes?.length || 0;
const currentHole = course?.holes?.find((hole) => hole.number === data?.data?.current_hole);

const firstSession = leaderboard && leaderboard.data![0];
const scorecards = leaderboard.data!.flatMap((session) => session.scorecards);

const rankedScorecards = firstSession.strokes
  ? standardCompRank(scorecards, 'to_par')
  : standardCompRank(
      scorecards.map((s) => ({ ...s, to_par: s.through! * 2 - s.points! })),
      'to_par'
    );

const isComplete = scorecards.every((scorecard) => scorecard.through === course.holes_count);

// markAsDone
---

<Layout title="LEDARTAVLA - Tisdagsgolfen">
  <header>
    <button type="button" onclick="javascript:history.back()">&larr;</button>
  </header>
  <main>
    <h2>Ledartavla</h2>
    <CourseRow course={course} />
    <Row>
      <span></span>
      <LiveLeaderboardHeader special={firstSession.special} />
    </Row>

    {
      scorecards.map((scorecard) => (
        <LiveLederboardCard
          scorecard={scorecard as ScorecardWithRank}
          specialEvent={firstSession.special}
        />
      ))
    }

    <EventPillRow
      live
      special={firstSession.special}
      teamEvent={firstSession.team_event}
      strokes={firstSession.strokes}
      small
    />
  </main>
</Layout>
