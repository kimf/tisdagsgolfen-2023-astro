---
export interface Props {
  events: TourEvent[];
}
import { getPlayers } from '../utils/getPlayers';
import buildLeaderboardItems from '../utils/buildLeaderboardItems';
import FinesSummary from './Leaderboard/FinesSummary.astro';
import LeaderboardCard from './Leaderboard/LeaderboardCard.astro';
const { events } = Astro.props;

const sorting = (Astro.url.searchParams.get('sorting') || 'rank') as SortingType;

const playersData = await getPlayers();

const scoringSessions = events.flatMap((event) => event.event_sessions.flatMap((es) => es.session));
const leaderboardItems = buildLeaderboardItems(scoringSessions, playersData.data as Player[]);

const sortedPlayers = leaderboardItems[sorting as SortingType].filter(
  (item) => item.events !== 0
) as LeaderboardItem[];
---

<div>
  <a href="?sorting=rank" class={sorting === 'rank' ? 'active interactive' : 'interactive'}>
    <button>Poäng</button>
  </a>
  <a href="?sorting=kr" class={sorting === 'kr' ? 'active interactive' : 'interactive'}>
    <button>Böter</button>
  </a>
</div>
<table>
  {sortedPlayers.map((item) => (
    <LeaderboardCard item={item} sorting={sorting} />
  ))}
</table>

{sorting === 'kr' && <FinesSummary players={sortedPlayers} />}
