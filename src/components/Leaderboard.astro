---
export interface Props {
  events: TourEvent[];
}
import { getPlayers } from '../utils/getPlayers';
import buildLeaderboardItems from '../utils/buildLeaderboardItems';
import FinesSummary from './Leaderboard/FinesSummary.astro';
import LeaderboardCard from './Leaderboard/LeaderboardCard.astro';
const { events } = Astro.props;

const playersData = await getPlayers();

const scoringSessions = events.flatMap((event) => event.event_sessions.flatMap((es) => es.session));
const leaderboardItems = buildLeaderboardItems(scoringSessions, playersData.data as Player[]);

const rankPlayers = leaderboardItems['rank'].filter(
  (item) => item.events !== 0
) as LeaderboardItem[];

const krPlayers = leaderboardItems['kr'].filter(
  (item) => item.events !== 0
) as LeaderboardItem[];
---
<div class="tabs">
  <input type="radio" id="tab1" name="tab-control" checked>
  <input type="radio" id="tab2" name="tab-control">
  <ul>
    <li title="Över Par"><label for="tab1" role="button">Över Par</label></li>
    <li title="Böter"><label for="tab2" role="button">Böter</label></li>
  </ul>
  <div class="content">
    <section>
      <table>
        {rankPlayers.map((item) => (
          <LeaderboardCard item={item} sorting="rank"} />
        ))}
      </table>
    </section>
    <section>
      <table>
        {krPlayers.map((item) => (
          <LeaderboardCard item={item} sorting="kr"} />
        ))}
      </table>
      <FinesSummary players={krPlayers} />
    </section>
  </div>
</div>

<style>
.tabs {
  width: 100%;
}
.tabs input[name=tab-control] {
  display: none;
}
.tabs ul li label {
  font-weight: bold;
  color: #428BFF;
}
.tabs ul {
  list-style-type: none;
  padding-left: 0;
  display: flex;
  flex-direction: row;
  margin-bottom: 10px;
  padding-bottom: 10px;
  justify-content: space-between;
  align-items: flex-end;
  flex-wrap: wrap;
  border-bottom: 2px solid #ccc;
}
.tabs ul li {
  box-sizing: border-box;
  flex: 1;
  width: 50%;
  padding: 0 10px;
  text-align: center;
}
.tabs ul li label {
  transition: all 0.3s ease-in-out;
  color: #929daf;
  padding: 5px auto;
  overflow: hidden;
  text-overflow: ellipsis;
  display: block;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  white-space: nowrap;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
.tabs ul li label:hover, .tabs ul li label:focus, .tabs ul li label:active {
  outline: 0;
  color: #bec5cf;
}

.tabs .content section {
  display: none;
  -webkit-animation-name: content;
          animation-name: content;
  -webkit-animation-direction: normal;
          animation-direction: normal;
  -webkit-animation-duration: 0.3s;
          animation-duration: 0.3s;
  -webkit-animation-timing-function: ease-in-out;
          animation-timing-function: ease-in-out;
  -webkit-animation-iteration-count: 1;
          animation-iteration-count: 1;
}

.tabs input[name=tab-control]:nth-of-type(1):checked ~ ul > li:nth-child(1) > label,
.tabs input[name=tab-control]:nth-of-type(2):checked ~ ul > li:nth-child(2) > label {
  cursor: default;
  color: #428BFF;
}

.tabs input[name=tab-control]:nth-of-type(1):checked ~ .content > section:nth-child(1),
.tabs input[name=tab-control]:nth-of-type(2):checked ~ .content > section:nth-child(2) {
  display: block;
}

@-webkit-keyframes content {
  from {
    opacity: 0;
    transform: translateY(5%);
  }
  to {
    opacity: 1;
    transform: translateY(0%);
  }
}
@keyframes content {
  from {
    opacity: 0;
    transform: translateY(5%);
  }
  to {
    opacity: 1;
    transform: translateY(0%);
  }
}
</style>
