---
import CourseRow from '../../components/2324/CourseRow.astro';
import EventPillRow from '../../components/2324/EventPillRow.astro';
import Row from '../../components/2324/Row.astro';
import Beers from '../../components/Shared/Beers.astro';
import Ciders from '../../components/Shared/Ciders.astro';
import Name from '../../components/Shared/Name.astro';
import ToPar from '../../components/Shared/ToPar.astro';
import Layout from '../../layouts/2324.astro';
import { getEvent } from '../../utils/2324/getEvent';
import standardCompRank from '../../utils/standardCompetitionRanking';

export interface Props {
  year: SeasonYear;
}

const { year } = Astro.props;

const { id } = Astro.params;
const eventId = parseInt(`${id}`, 10);

const data = await getEvent(eventId);
const event = data?.data;

if (!event) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

const date = new Date(event.created_at as string).toLocaleDateString('sv-SE', {
  month: 'long',
  day: 'numeric',
});

const scorecards = event.event_sessions.flatMap((es) => es.session?.scorecards);
const rankedScorecards: ScorecardWithRank[] = standardCompRank(scorecards, 'week_points', false);
---

<Layout title="VECKORESULTAT - Tisdagsgolfen" />
  <header>
    <a href={`/${year}/events`}>
      &larr; Tillbaka
    </a>
    <h1>{date}</h1>
  </header>
  <main>
    <div class="subheader">
  <EventPillRow
    special={event.special}
    teamEvent={event.team_event}
    strokes={event.strokes}
    small
  />

  <CourseRow course={event.course as Course} />
  </div>

  <table>
    <thead>
      <tr>
        <td>Spelare</td>
        <td>SLAG</td>
        <td>POÃ„NG</td>
        <td>+/-</td>
        {!event.special && <td>ðŸ’¸</td>}
        <td>P</td>
      </tr>
    </thead>
    <tbody>
  {
    rankedScorecards.map((scorecard) => (
      <tr>
        <td>
          {scorecard.players.map((p) => (
            <div>
              <Name name={p.player.full_name || ''} firstNameOnly />
              <Beers beers={p.beers || 0} />
              <Ciders ciders={p.ciders || 0} />
            </div>
          ))}
        </td>

          <td>{scorecard.strokes}</td>
          <td>{scorecard.points}</td>

          <td><ToPar to_par={scorecard.to_par || 0} /></td>

          {!event.team_event && !event.special && (
            <td>{scorecard.players.reduce((a, b) => a + (b.fines || 0), 0)}</td>
          )}
          <td>{scorecard.week_points?.toFixed(1)}</td>

      </tr>
    ))
  }
    </tbody>
  </table>
</main>



 <style>
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 16px;
    margin-bottom: 16px;
  }

  thead {
    color: #000;
    font-weight: bold;
    border-bottom: 2px solid #777;
  }

  tbody {
    color: #333;
  }

  td {
    padding: 8px 2px;
    border-bottom: 1px dashed #ccc;
  }

  td.total {
    text-align: right;
  }

  tbody td.total {
    font-size: 1.4em;
    color: #000;
  }


  .subheader {
    float: left;
    width: 100%;
    margin-bottom: 20px;
  }

    header {
      padding: 8px;
      background: #008080;

      h1 {
        font-size: 18px;
        text-transform: uppercase;
        color: #fff
      }

      a {
        color: #eee;
        padding: 0 8px;
      }
    }

    main {
      padding: 8px;
      background: #fff;
    }
  </style>
